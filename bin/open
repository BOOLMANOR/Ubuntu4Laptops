#!/usr/bin/python
# smart open command (mac-like) for GNU/Linux (c) syscl
# To use it copy it to /usr/local/bin

# 0.6 O(1) is_remote_proto() using frozenset instead of previous O(n) algo
# 0.5 merge_dups() for more flexible usage
# 0.4 clean code style
# 0.3 samba protocol support
# 0.2 consider duplicate '/' character 
# 0.1 initial version

import sys
import os
import platform
import subprocess

# define errors
kArgvMissing = -1

if len(sys.argv) <= 1:
    print("Usage: open [filesnames]")
    print("Help: Open opens files from a shell.")
    print("      By default, opens each file using the default application for that file.")
    print("      If the file is in the form of a URL, the file will be opened as a URL.") 
    exit(kArgvMissing)

def is_remote_proto(repo):
    """check if it is remote protocol"""
    # frozenset never changes
    rps_set = frozenset(["http", "https", "ftp", "smb", "nfs"])
    if repo[0:repo.find("://")] in rps_set:
        return True
    return False

def merge_dups(s, t):
    """merge duplicates character t of a string s into one"""
    is_dup = False
    ret = ""
    for c in s:
        if c == t and is_dup:
            continue
        elif c == t:
            is_dup = True
        else:
            is_dup = False
        ret = ret + c
    return ret


# starting from index one to end
# note: shell paraphases "~" into "/home/[username]" 
for path in sys.argv[1:]:
    # check if it is remote protocols
    is_link = is_remote_proto(path)
    if path[0] == '~' or path[0] == '/' or is_link:
        if not is_link:
            # Remove duplicate '/' even though xdg-open 
            # concerns the case but we are not sure
            # if it will remove this feature later on
            path = merge_dups(path, "/")
    else: 
        # correct it with current working directory in use
        path = os.getcwd() + "/" + path

    if not (is_link or os.path.exists(path)):
        print("The file " + path + " does not exist.")
        continue

    subprocess.call(["xdg-open", path], stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT)

exit()